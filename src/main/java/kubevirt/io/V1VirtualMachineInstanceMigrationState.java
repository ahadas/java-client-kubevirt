/*
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package kubevirt.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1VirtualMachineInstanceMigrationState
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-10T14:44:51.030+02:00")
public class V1VirtualMachineInstanceMigrationState {
  @SerializedName("abortRequested")
  private Boolean abortRequested = null;

  @SerializedName("abortStatus")
  private String abortStatus = null;

  @SerializedName("completed")
  private Boolean completed = null;

  @SerializedName("endTimestamp")
  private String endTimestamp = null;

  @SerializedName("failed")
  private Boolean failed = null;

  @SerializedName("migrationUid")
  private String migrationUid = null;

  @SerializedName("sourceNode")
  private String sourceNode = null;

  @SerializedName("startTimestamp")
  private String startTimestamp = null;

  @SerializedName("targetDirectMigrationNodePorts")
  private Object targetDirectMigrationNodePorts = null;

  @SerializedName("targetNode")
  private String targetNode = null;

  @SerializedName("targetNodeAddress")
  private String targetNodeAddress = null;

  @SerializedName("targetNodeDomainDetected")
  private Boolean targetNodeDomainDetected = null;

  @SerializedName("targetPod")
  private String targetPod = null;

  public V1VirtualMachineInstanceMigrationState abortRequested(Boolean abortRequested) {
    this.abortRequested = abortRequested;
    return this;
  }

   /**
   * Indicates that the migration has been requested to abort
   * @return abortRequested
  **/
  @ApiModelProperty(value = "Indicates that the migration has been requested to abort")
  public Boolean isAbortRequested() {
    return abortRequested;
  }

  public void setAbortRequested(Boolean abortRequested) {
    this.abortRequested = abortRequested;
  }

  public V1VirtualMachineInstanceMigrationState abortStatus(String abortStatus) {
    this.abortStatus = abortStatus;
    return this;
  }

   /**
   * Indicates the final status of the live migration abortion
   * @return abortStatus
  **/
  @ApiModelProperty(value = "Indicates the final status of the live migration abortion")
  public String getAbortStatus() {
    return abortStatus;
  }

  public void setAbortStatus(String abortStatus) {
    this.abortStatus = abortStatus;
  }

  public V1VirtualMachineInstanceMigrationState completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Indicates the migration completed
   * @return completed
  **/
  @ApiModelProperty(value = "Indicates the migration completed")
  public Boolean isCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }

  public V1VirtualMachineInstanceMigrationState endTimestamp(String endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

   /**
   * The time the migration action ended
   * @return endTimestamp
  **/
  @ApiModelProperty(value = "The time the migration action ended")
  public String getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(String endTimestamp) {
    this.endTimestamp = endTimestamp;
  }

  public V1VirtualMachineInstanceMigrationState failed(Boolean failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Indicates that the migration failed
   * @return failed
  **/
  @ApiModelProperty(value = "Indicates that the migration failed")
  public Boolean isFailed() {
    return failed;
  }

  public void setFailed(Boolean failed) {
    this.failed = failed;
  }

  public V1VirtualMachineInstanceMigrationState migrationUid(String migrationUid) {
    this.migrationUid = migrationUid;
    return this;
  }

   /**
   * The VirtualMachineInstanceMigration object associated with this migration
   * @return migrationUid
  **/
  @ApiModelProperty(value = "The VirtualMachineInstanceMigration object associated with this migration")
  public String getMigrationUid() {
    return migrationUid;
  }

  public void setMigrationUid(String migrationUid) {
    this.migrationUid = migrationUid;
  }

  public V1VirtualMachineInstanceMigrationState sourceNode(String sourceNode) {
    this.sourceNode = sourceNode;
    return this;
  }

   /**
   * The source node that the VMI originated on
   * @return sourceNode
  **/
  @ApiModelProperty(value = "The source node that the VMI originated on")
  public String getSourceNode() {
    return sourceNode;
  }

  public void setSourceNode(String sourceNode) {
    this.sourceNode = sourceNode;
  }

  public V1VirtualMachineInstanceMigrationState startTimestamp(String startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * The time the migration action began
   * @return startTimestamp
  **/
  @ApiModelProperty(value = "The time the migration action began")
  public String getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(String startTimestamp) {
    this.startTimestamp = startTimestamp;
  }

  public V1VirtualMachineInstanceMigrationState targetDirectMigrationNodePorts(Object targetDirectMigrationNodePorts) {
    this.targetDirectMigrationNodePorts = targetDirectMigrationNodePorts;
    return this;
  }

   /**
   * The list of ports opened for live migration on the destination node
   * @return targetDirectMigrationNodePorts
  **/
  @ApiModelProperty(value = "The list of ports opened for live migration on the destination node")
  public Object getTargetDirectMigrationNodePorts() {
    return targetDirectMigrationNodePorts;
  }

  public void setTargetDirectMigrationNodePorts(Object targetDirectMigrationNodePorts) {
    this.targetDirectMigrationNodePorts = targetDirectMigrationNodePorts;
  }

  public V1VirtualMachineInstanceMigrationState targetNode(String targetNode) {
    this.targetNode = targetNode;
    return this;
  }

   /**
   * The target node that the VMI is moving to
   * @return targetNode
  **/
  @ApiModelProperty(value = "The target node that the VMI is moving to")
  public String getTargetNode() {
    return targetNode;
  }

  public void setTargetNode(String targetNode) {
    this.targetNode = targetNode;
  }

  public V1VirtualMachineInstanceMigrationState targetNodeAddress(String targetNodeAddress) {
    this.targetNodeAddress = targetNodeAddress;
    return this;
  }

   /**
   * The address of the target node to use for the migration
   * @return targetNodeAddress
  **/
  @ApiModelProperty(value = "The address of the target node to use for the migration")
  public String getTargetNodeAddress() {
    return targetNodeAddress;
  }

  public void setTargetNodeAddress(String targetNodeAddress) {
    this.targetNodeAddress = targetNodeAddress;
  }

  public V1VirtualMachineInstanceMigrationState targetNodeDomainDetected(Boolean targetNodeDomainDetected) {
    this.targetNodeDomainDetected = targetNodeDomainDetected;
    return this;
  }

   /**
   * The Target Node has seen the Domain Start Event
   * @return targetNodeDomainDetected
  **/
  @ApiModelProperty(value = "The Target Node has seen the Domain Start Event")
  public Boolean isTargetNodeDomainDetected() {
    return targetNodeDomainDetected;
  }

  public void setTargetNodeDomainDetected(Boolean targetNodeDomainDetected) {
    this.targetNodeDomainDetected = targetNodeDomainDetected;
  }

  public V1VirtualMachineInstanceMigrationState targetPod(String targetPod) {
    this.targetPod = targetPod;
    return this;
  }

   /**
   * The target pod that the VMI is moving to
   * @return targetPod
  **/
  @ApiModelProperty(value = "The target pod that the VMI is moving to")
  public String getTargetPod() {
    return targetPod;
  }

  public void setTargetPod(String targetPod) {
    this.targetPod = targetPod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VirtualMachineInstanceMigrationState v1VirtualMachineInstanceMigrationState = (V1VirtualMachineInstanceMigrationState) o;
    return Objects.equals(this.abortRequested, v1VirtualMachineInstanceMigrationState.abortRequested) &&
        Objects.equals(this.abortStatus, v1VirtualMachineInstanceMigrationState.abortStatus) &&
        Objects.equals(this.completed, v1VirtualMachineInstanceMigrationState.completed) &&
        Objects.equals(this.endTimestamp, v1VirtualMachineInstanceMigrationState.endTimestamp) &&
        Objects.equals(this.failed, v1VirtualMachineInstanceMigrationState.failed) &&
        Objects.equals(this.migrationUid, v1VirtualMachineInstanceMigrationState.migrationUid) &&
        Objects.equals(this.sourceNode, v1VirtualMachineInstanceMigrationState.sourceNode) &&
        Objects.equals(this.startTimestamp, v1VirtualMachineInstanceMigrationState.startTimestamp) &&
        Objects.equals(this.targetDirectMigrationNodePorts, v1VirtualMachineInstanceMigrationState.targetDirectMigrationNodePorts) &&
        Objects.equals(this.targetNode, v1VirtualMachineInstanceMigrationState.targetNode) &&
        Objects.equals(this.targetNodeAddress, v1VirtualMachineInstanceMigrationState.targetNodeAddress) &&
        Objects.equals(this.targetNodeDomainDetected, v1VirtualMachineInstanceMigrationState.targetNodeDomainDetected) &&
        Objects.equals(this.targetPod, v1VirtualMachineInstanceMigrationState.targetPod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abortRequested, abortStatus, completed, endTimestamp, failed, migrationUid, sourceNode, startTimestamp, targetDirectMigrationNodePorts, targetNode, targetNodeAddress, targetNodeDomainDetected, targetPod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VirtualMachineInstanceMigrationState {\n");
    
    sb.append("    abortRequested: ").append(toIndentedString(abortRequested)).append("\n");
    sb.append("    abortStatus: ").append(toIndentedString(abortStatus)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    migrationUid: ").append(toIndentedString(migrationUid)).append("\n");
    sb.append("    sourceNode: ").append(toIndentedString(sourceNode)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    targetDirectMigrationNodePorts: ").append(toIndentedString(targetDirectMigrationNodePorts)).append("\n");
    sb.append("    targetNode: ").append(toIndentedString(targetNode)).append("\n");
    sb.append("    targetNodeAddress: ").append(toIndentedString(targetNodeAddress)).append("\n");
    sb.append("    targetNodeDomainDetected: ").append(toIndentedString(targetNodeDomainDetected)).append("\n");
    sb.append("    targetPod: ").append(toIndentedString(targetPod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

