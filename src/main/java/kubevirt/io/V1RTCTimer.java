/*
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package kubevirt.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1RTCTimer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-10T14:44:51.030+02:00")
public class V1RTCTimer {
  @SerializedName("present")
  private Boolean present = null;

  @SerializedName("tickPolicy")
  private String tickPolicy = null;

  @SerializedName("track")
  private String track = null;

  public V1RTCTimer present(Boolean present) {
    this.present = present;
    return this;
  }

   /**
   * Enabled set to false makes sure that the machine type or a preset can&#39;t add the timer. Defaults to true. +optional
   * @return present
  **/
  @ApiModelProperty(value = "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. +optional")
  public Boolean isPresent() {
    return present;
  }

  public void setPresent(Boolean present) {
    this.present = present;
  }

  public V1RTCTimer tickPolicy(String tickPolicy) {
    this.tickPolicy = tickPolicy;
    return this;
  }

   /**
   * TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \&quot;delay\&quot;, \&quot;catchup\&quot;.
   * @return tickPolicy
  **/
  @ApiModelProperty(value = "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\".")
  public String getTickPolicy() {
    return tickPolicy;
  }

  public void setTickPolicy(String tickPolicy) {
    this.tickPolicy = tickPolicy;
  }

  public V1RTCTimer track(String track) {
    this.track = track;
    return this;
  }

   /**
   * Track the guest or the wall clock.
   * @return track
  **/
  @ApiModelProperty(value = "Track the guest or the wall clock.")
  public String getTrack() {
    return track;
  }

  public void setTrack(String track) {
    this.track = track;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1RTCTimer v1RTCTimer = (V1RTCTimer) o;
    return Objects.equals(this.present, v1RTCTimer.present) &&
        Objects.equals(this.tickPolicy, v1RTCTimer.tickPolicy) &&
        Objects.equals(this.track, v1RTCTimer.track);
  }

  @Override
  public int hashCode() {
    return Objects.hash(present, tickPolicy, track);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1RTCTimer {\n");
    
    sb.append("    present: ").append(toIndentedString(present)).append("\n");
    sb.append("    tickPolicy: ").append(toIndentedString(tickPolicy)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

